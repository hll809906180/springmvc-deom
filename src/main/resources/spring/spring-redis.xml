<?xml version="1.0" encoding="UTF-8"?>
<!--<beans xmlns="http://www.springframework.org/schema/beans"-->
<!--       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"-->
<!--       xmlns:context="http://www.springframework.org/schema/context"-->
<!--       xmlns:cache="http://www.springframework.org/schema/cache"-->
<!--       xsi:schemaLocation="http://www.springframework.org/schema/beans-->
<!--       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd-->
<!--       http://www.springframework.org/schema/context-->
<!--       http://www.springframework.org/schema/context/spring-context-3.1.xsd-->
<!--       http://www.springframework.org/schema/cache-->
<!--       http://www.springframework.org/schema/cache/spring-cache.xsd"-->
<!--       default-lazy-init="true">-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <description>Spring Redis Configuration</description>

    <!-- 加载配置属性文件 -->
    <context:property-placeholder ignore-unresolvable="true" location="classpath*:/dev/jdbcConf.properties"/>

    <!-- 启动缓存注解功能 -->
    <!-- <cache:annotation-driven cache-manager="cacheManager"/>-->

    <!-- redis属性配置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 最大连接数, 默认8个 -->
        <property name="maxTotal" value="${redis.pool.maxTotal}"/>
        <!--连接池中的最大空闲连接, 默认8个 -->
        <property name="maxIdle" value="${redis.pool.maxIdle}"/>
        <!--每次逐出检查时 逐出的最大数目，默认3 -->
        <property name="numTestsPerEvictionRun" value="${redis.pool.numTestsPerEvictionRun}"/>
        <!--逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1 -->
        <property name="timeBetweenEvictionRunsMillis" value="${redis.pool.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${redis.pool.minEvictableIdleTimeMillis}"/>
        <!--逐出连接的最小空闲时间 默认1800000毫秒(30分钟)-->
        <property name="softMinEvictableIdleTimeMillis" value="${redis.pool.softMinEvictableIdleTimeMillis}"/>
        <!--获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,默认-1-->
        <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"/>
        <!--在获取连接的时候检查有效性, 默认false，如果为true，则得到的jedis实例均是可用的-->
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>
        <!--在空闲时检查有效性, 默认false-->
        <property name="testWhileIdle" value="${redis.pool.testWhileIdle}"/>
        <property name="testOnReturn" value="${redis.pool.testOnReturn}"/>
        <!--是否启用pool的jmx管理功能, 默认true-->
        <property name="jmxEnabled" value="${redis.pool.jmxEnabled}"/>
        <!--连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true-->
        <property name="blockWhenExhausted" value="${redis.pool.blockWhenExhausted}"/>
    </bean>


    <!-- Redis主从 Sentinel（哨兵） -->
    <bean id="redisSentinelConfiguration" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <property name="master">
            <bean class="org.springframework.data.redis.connection.RedisNode">
                <property name="name" value="${redis.sentinel.config.master.name}">
                </property>
            </bean>
        </property>
        <property name="sentinels">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg value="${redis.sentinel.host1}"/>
                    <constructor-arg value="${redis.sentinel.port1}" type="int"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg value="${redis.sentinel.host2}"/>
                    <constructor-arg value="${redis.sentinel.port2}" type="int"/>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg value="${redis.sentinel.host3}"/>
                    <constructor-arg value="${redis.sentinel.port3}" type="int"/>
                </bean>
            </set>
        </property>
    </bean>


    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg ref="redisSentinelConfiguration"/>
        <constructor-arg ref="jedisPoolConfig"/>
        <property name="password" value="${encrypt_limitlist.redis.pwd}"/>
    </bean>

    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <!--        <property name="keySerializer"><bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/></property>
                <property name="valueSerializer"><bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/></property>
                <property name="hashKeySerializer"><bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/></property>
                <property name="hashValueSerializer"><bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/></property>-->
    </bean>

    <!-- 缓存管理器 -->
    <!--    <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
            <constructor-arg ref="redisTemplate" />
        </bean>-->

    <bean id="redisService" class="cn.leadeon.util.RedisService">
        <property name="redisTemplate" ref="redisTemplate"/>
    </bean>

</beans>